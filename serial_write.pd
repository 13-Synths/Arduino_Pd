#N canvas 238 160 616 527 10;
#X obj 87 260 spigot;
#X msg 120 238 0;
#X msg 30 205 1;
#X obj 49 374 spigot;
#X msg 69 205 0;
#X obj 30 180 t b b b;
#X obj 30 102 inlet;
#X obj 30 227 t f f;
#X obj 49 442 outlet;
#X text 48 475 Written by Alexandros Drymonitis;
#N canvas 561 153 684 339 repack 0;
#X obj 36 27 inlet;
#X obj 36 49 route float bang;
#X obj 36 134 + 1;
#X obj 84 184 t l l;
#X obj 84 162 list prepend;
#X obj 36 158 sel;
#X obj 297 195 inlet data_amount;
#X obj 63 228 outlet;
#X obj 36 71 t b f;
#X obj 63 206 list;
#X obj 232 193 sel 0 1;
#X obj 297 218 route 0 1;
#X obj 232 235 f;
#X obj 251 259 f;
#X text 362 216 these are the two groups of values;
#X obj 36 180 t b b;
#X obj 36 111 f;
#X obj 198 116 spigot;
#X obj 82 71 t b b b b;
#X obj 204 193 0;
#X obj 232 169 1;
#X obj 268 99 0;
#X obj 231 88 1;
#X obj 82 94 0;
#X obj 198 145 t b b b b;
#X text 295 74 [sel] must bang only the first time it reaches a limit
\, because 0xc0 received from the Arduino bangs it in the beginning
;
#X connect 0 0 1 0;
#X connect 1 0 8 0;
#X connect 1 1 18 0;
#X connect 2 0 16 1;
#X connect 2 0 5 0;
#X connect 3 0 9 1;
#X connect 3 1 4 1;
#X connect 4 0 3 0;
#X connect 5 0 15 0;
#X connect 6 0 11 0;
#X connect 8 0 16 0;
#X connect 8 1 4 0;
#X connect 9 0 7 0;
#X connect 10 0 12 0;
#X connect 10 1 13 0;
#X connect 11 0 12 1;
#X connect 11 1 13 1;
#X connect 12 0 5 1;
#X connect 13 0 5 1;
#X connect 15 0 17 0;
#X connect 15 1 9 0;
#X connect 16 0 2 0;
#X connect 17 0 24 0;
#X connect 18 0 23 0;
#X connect 18 1 4 1;
#X connect 18 2 19 0;
#X connect 18 3 22 0;
#X connect 19 0 10 0;
#X connect 20 0 10 0;
#X connect 21 0 17 1;
#X connect 22 0 17 1;
#X connect 23 0 16 1;
#X connect 24 0 4 1;
#X connect 24 1 23 0;
#X connect 24 2 20 0;
#X connect 24 3 21 0;
#X restore 49 351 pd repack;
#X text 27 9 This abstraction uses the technique found in the rePatcher
by Open Music Labs (slightly modified) \, to receive data from the
Arduino. It needs a unique byte to denote the beginning of the data
stream (192 \, [sel]s' argument \, 0xc0 in hexadecimal) after which
\, all bytes are being collected by [pd repack] and dumped as a list.
;
#X obj 142 420 t l b;
#X obj 142 442 outlet;
#X text 148 239 start the process from the beginning;
#X obj 421 310 inlet change_num_of_data;
#X obj 253 310 t f f;
#N canvas 339 173 769 381 \$0-route_list 0;
#X obj 31 248 f;
#X obj 61 248 == 0;
#X obj 31 48 t b l;
#X obj 31 26 inlet;
#X obj 31 271 list append;
#X obj 31 317 outlet;
#X obj 130 317 outlet;
#X obj 130 273 inlet which_is_analog;
#N canvas 664 327 450 300 specify_analog 0;
#X obj 55 130 t l l;
#X obj 55 173 spigot;
#X obj 105 173 spigot;
#X obj 185 130 t l l;
#X obj 185 173 spigot;
#X obj 235 173 spigot;
#N canvas 515 261 426 339 assemble_analog 0;
#X obj 38 81 list split 2;
#X obj 51 106 list;
#X obj 128 151 unpack;
#X obj 128 190 +;
#X obj 161 173 * 128;
#X obj 38 56 inlet bytes;
#X obj 107 280 outlet;
#X obj 128 213 list prepend;
#X obj 128 235 t l l;
#X obj 38 134 t b l;
#X obj 107 257 list;
#X obj 107 104 t b b;
#X text 36 10 this used to be the [read_analog_pins] abstraction \,
which is now integrated in the [serial_write] abstraction.;
#X connect 0 0 9 0;
#X connect 0 1 1 1;
#X connect 0 2 11 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 3 0 7 0;
#X connect 4 0 3 1;
#X connect 5 0 0 0;
#X connect 7 0 8 0;
#X connect 8 0 10 1;
#X connect 8 1 7 1;
#X connect 9 0 1 0;
#X connect 9 1 2 0;
#X connect 10 0 6 0;
#X connect 11 0 10 0;
#X connect 11 1 7 1;
#X restore 105 203 pd assemble_analog;
#N canvas 515 261 426 339 assemble_analog 0;
#X obj 38 81 list split 2;
#X obj 51 106 list;
#X obj 128 151 unpack;
#X obj 128 190 +;
#X obj 161 173 * 128;
#X obj 38 56 inlet bytes;
#X obj 107 280 outlet;
#X obj 128 213 list prepend;
#X obj 128 235 t l l;
#X obj 38 134 t b l;
#X obj 107 257 list;
#X obj 107 104 t b b;
#X text 36 10 this used to be the [read_analog_pins] abstraction \,
which is now integrated in the [serial_write] abstraction.;
#X connect 0 0 9 0;
#X connect 0 1 1 1;
#X connect 0 2 11 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 3 0 7 0;
#X connect 4 0 3 1;
#X connect 5 0 0 0;
#X connect 7 0 8 0;
#X connect 8 0 10 1;
#X connect 8 1 7 1;
#X connect 9 0 1 0;
#X connect 9 1 2 0;
#X connect 10 0 6 0;
#X connect 11 0 10 0;
#X connect 11 1 7 1;
#X restore 235 203 pd assemble_analog;
#X obj 55 238 outlet;
#X obj 185 238 outlet;
#X obj 217 35 inlet which_is_analog;
#X obj 138 149 == 0;
#X obj 218 149 == 0;
#X obj 217 57 t f f f f;
#X obj 55 67 inlet;
#X obj 55 89 route 0 1;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 1 0 8 0;
#X connect 2 0 6 0;
#X connect 3 0 4 0;
#X connect 3 1 5 0;
#X connect 4 0 9 0;
#X connect 5 0 7 0;
#X connect 6 0 8 0;
#X connect 7 0 9 0;
#X connect 10 0 13 0;
#X connect 11 0 2 1;
#X connect 12 0 4 1;
#X connect 13 0 1 1;
#X connect 13 1 11 0;
#X connect 13 2 12 0;
#X connect 13 3 5 1;
#X connect 14 0 15 0;
#X connect 15 0 0 0;
#X connect 15 1 3 0;
#X restore 31 295 pd specify_analog;
#X text 81 19 if we don't provide a second argument \, use 1 to compare
[f] so that it always outputs 0 \, else use 0;
#X obj 82 50 r \$0-num_args;
#X obj 82 72 <= 2;
#X obj 297 120 r \$0-arg_type;
#X obj 240 142 sel analog;
#X obj 240 97 r \$0-message_type;
#X text 377 140 if we have provided one two arguments only \, set the
type of argument to see if a message we send is of the same type \,
so that we don't change the alternating counter;
#X obj 297 164 t b;
#X msg 297 231 0;
#X obj 297 209 spigot;
#X obj 82 94 t f f;
#X text 343 212 if we have already provided four arguments \, then
don't let the messages control whether we receive both analog and digital
values;
#X connect 0 0 1 0;
#X connect 0 0 4 0;
#X connect 1 0 0 1;
#X connect 2 0 0 0;
#X connect 2 1 4 1;
#X connect 3 0 2 0;
#X connect 4 0 8 0;
#X connect 7 0 8 1;
#X connect 8 0 5 0;
#X connect 8 1 6 0;
#X connect 10 0 11 0;
#X connect 11 0 19 0;
#X connect 12 0 13 1;
#X connect 13 1 16 0;
#X connect 14 0 13 0;
#X connect 16 0 18 0;
#X connect 17 0 1 1;
#X connect 18 0 17 0;
#X connect 19 0 1 1;
#X connect 19 1 18 1;
#X restore 49 399 pd \$0-route_list;
#N canvas 318 168 799 340 \$0-change_num_of_data 0;
#X obj 12 44 inlet which_is_analog;
#X obj 175 67 route analog digital;
#X obj 175 158 f;
#X obj 221 141 t f f;
#X obj 233 163 f;
#X obj 175 180 pack;
#X obj 175 252 outlet;
#X obj 233 185 == 0;
#X obj 233 207 pack;
#X obj 175 20 inlet change_num_of_data;
#X obj 196 112 * 2;
#X obj 175 42 t a a;
#X obj 358 59 unpack s f;
#X obj 358 81 s \$0-message_type;
#X obj 175 89 t b f;
#X obj 233 89 t b f;
#X connect 0 0 3 0;
#X connect 1 0 14 0;
#X connect 1 1 15 0;
#X connect 2 0 5 0;
#X connect 3 0 2 1;
#X connect 3 1 4 1;
#X connect 4 0 7 0;
#X connect 5 0 6 0;
#X connect 7 0 8 0;
#X connect 8 0 6 0;
#X connect 9 0 11 0;
#X connect 10 0 5 1;
#X connect 11 0 1 0;
#X connect 11 1 12 0;
#X connect 12 0 13 0;
#X connect 14 0 2 0;
#X connect 14 1 10 0;
#X connect 15 0 4 0;
#X connect 15 1 7 1;
#X restore 280 334 pd \$0-change_num_of_data;
#N canvas 204 143 852 414 \$0-assemble_num_of_data 0;
#X obj 58 346 outlet;
#X obj 58 36 loadbang;
#X obj 58 82 t b b;
#X obj 107 120 sel analog digital;
#X msg 107 206 2;
#X msg 159 221 1;
#X obj 58 238 *;
#X obj 58 58 t b b;
#X obj 428 75 t b b;
#X obj 428 104 \$2;
#X obj 477 153 sel analog digital;
#X obj 477 92 symbol \$1;
#X msg 477 198 2;
#X msg 529 210 1;
#X obj 428 227 *;
#X obj 107 99 symbol \$3;
#X obj 58 104 \$4;
#X msg 428 249 0 \$1;
#X msg 58 260 1 \$1;
#X text 465 249 first group of values;
#X text 94 259 second group of values;
#X text 55 2 analog values are split in two \, so we receive two bytes
per value. digital values are being received as is.;
#X obj 477 175 t b b;
#X msg 571 192 0;
#X obj 107 183 t b b;
#X msg 195 200 1;
#X obj 571 346 outlet which_is_analog;
#X msg 212 142 0;
#X text 224 111 if no second argument is provided;
#X text 225 122 set 0 as the number of values;
#X obj 212 164 t f f;
#X obj 239 208 s \$0-num_args;
#X msg 613 170 at least two arguments needed;
#X obj 239 186 + 2;
#X obj 477 114 t s s;
#X obj 541 131 s \$0-arg_type;
#X obj 613 192 print serial_write;
#X connect 1 0 7 0;
#X connect 2 0 16 0;
#X connect 2 1 15 0;
#X connect 3 0 24 0;
#X connect 3 1 5 0;
#X connect 3 2 27 0;
#X connect 4 0 6 1;
#X connect 5 0 6 1;
#X connect 6 0 18 0;
#X connect 7 0 2 0;
#X connect 7 1 8 0;
#X connect 8 0 9 0;
#X connect 8 1 11 0;
#X connect 9 0 14 0;
#X connect 10 0 22 0;
#X connect 10 1 13 0;
#X connect 10 2 32 0;
#X connect 11 0 34 0;
#X connect 12 0 14 1;
#X connect 13 0 14 1;
#X connect 14 0 17 0;
#X connect 15 0 3 0;
#X connect 16 0 6 0;
#X connect 17 0 0 0;
#X connect 18 0 0 0;
#X connect 22 0 12 0;
#X connect 22 1 23 0;
#X connect 23 0 26 0;
#X connect 24 0 4 0;
#X connect 24 1 25 0;
#X connect 25 0 26 0;
#X connect 27 0 30 0;
#X connect 30 0 18 0;
#X connect 30 1 33 0;
#X connect 32 0 36 0;
#X connect 33 0 31 0;
#X connect 34 0 10 0;
#X connect 34 1 35 0;
#X restore 100 286 pd \$0-assemble_num_of_data;
#N canvas 0 22 354 270 set_initializer 0;
#X obj 57 70 loadbang;
#X obj 57 92 \$5;
#X obj 57 114 sel 0;
#X msg 57 136 192;
#X obj 57 158 outlet;
#X obj 116 69 inlet;
#X text 91 136 this is the decimal version of 0xc0;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 3 0 4 0;
#X connect 5 0 2 0;
#X restore 474 139 pd set_initializer;
#X obj 30 156 select;
#X obj 474 117 inlet;
#X connect 0 0 10 0;
#X connect 1 0 0 1;
#X connect 2 0 7 0;
#X connect 3 0 17 0;
#X connect 4 0 3 1;
#X connect 5 0 2 0;
#X connect 5 1 10 0;
#X connect 5 2 4 0;
#X connect 6 0 21 0;
#X connect 7 0 3 1;
#X connect 7 1 0 1;
#X connect 10 0 3 0;
#X connect 12 0 13 0;
#X connect 12 1 1 0;
#X connect 15 0 18 1;
#X connect 16 0 17 1;
#X connect 16 1 18 0;
#X connect 17 0 8 0;
#X connect 17 1 12 0;
#X connect 18 0 10 1;
#X connect 19 0 10 1;
#X connect 19 1 16 0;
#X connect 20 0 21 1;
#X connect 21 0 5 0;
#X connect 21 1 0 0;
#X connect 22 0 20 0;
