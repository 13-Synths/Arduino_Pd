#N canvas 140 44 1019 681 10;
#X msg 54 398 close;
#X obj 37 14 cnv 15 400 60 empty empty empty 20 12 0 14 -200075 -66577
0;
#X text 746 624 Written by Alexandros Drymonitis;
#X msg 43 371 devices;
#X floatatom 103 379 5 0 0 0 - - -, f 5;
#X msg 103 398 open \$1;
#X text 45 22 [serial_print]: abstraction that works with Arduinos'
Serial.print() and Serial.println() functions (with the use of [comport])
;
#X text 540 83 Inlets:;
#X text 580 100 1st: bytes from [comport];
#X text 540 166 Outlets:;
#X obj 43 485 s;
#X floatatom 43 565 5 0 0 0 - - -, f 5;
#X floatatom 77 565 5 0 0 0 - - -, f 5;
#X floatatom 112 565 5 0 0 0 - - -, f 5;
#X obj 43 441 comport 6 9600;
#X text 541 26 Arguments: delimiter type (tab \, space \, comma \,
any). You can provide up to two arguments (cause three arguments is
the same as "any"). if no argument is provided \, then all three symbols
will work as delimiters;
#X text 580 115 2nd: change delimiter type with a symbol (as with the
arguments \, you can use two delimiters separated by a space \, e.g.
"tab comma");
#X obj 43 463 serial_print any;
#X obj 43 541 unpack f f f;
#X obj 173 541 unpack f f f;
#X obj 173 564 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 207 564 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 242 564 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 40 78 [serial_print] is a vanilla abstraction that works with
[comport] and Arduino's Serial.print() and Serial.println() functions.
;
#N canvas 384 227 505 369 another_way_to_use_it 0;
#X msg 49 140 close;
#X msg 38 113 devices;
#X floatatom 98 121 5 0 0 0 - - -, f 5;
#X msg 98 140 open \$1;
#X obj 38 205 serial_print any;
#X obj 38 183 comport;
#X obj 38 227 list prepend;
#X obj 38 249 list trim;
#X floatatom 38 317 5 0 0 0 - - -, f 5;
#X floatatom 72 317 5 0 0 0 - - -, f 5;
#X floatatom 107 317 5 0 0 0 - - -, f 5;
#X obj 38 295 unpack f f f;
#X obj 144 295 unpack f f f;
#X obj 144 316 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 178 316 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 213 316 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 36 43 Instead of [send] and [receive] \, you can also use [route]
\, but the [send]/[receive] technique might be a bit more intuitive...
;
#X text 38 13 Close [comport] on the parent patch before attempting
to open this one.;
#X obj 38 271 route Analog_values: Digital_values:;
#X connect 0 0 5 0;
#X connect 1 0 5 0;
#X connect 2 0 3 0;
#X connect 3 0 5 0;
#X connect 4 0 6 0;
#X connect 4 1 6 1;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 7 0 18 0;
#X connect 11 0 8 0;
#X connect 11 1 9 0;
#X connect 11 2 10 0;
#X connect 12 0 13 0;
#X connect 12 1 14 0;
#X connect 12 2 15 0;
#X connect 18 0 11 0;
#X connect 18 1 12 0;
#X restore 43 595 pd another_way_to_use_it;
#X text 40 237 This help patch works with the serial_print.ino sketch.
Check it for more information.;
#X text 584 184 1st: list of values of a group.;
#X text 583 205 2nd: string to be used as a tag for a value group (print
this first from the Arduino so that it works \, otherwise you'll probably
get strange results). This comes out first \, then the value list out
the left outlet;
#X obj 43 517 r Analog_values:;
#X obj 173 517 r Digital_values:;
#X text 40 120 You can use commas \, spaces or tabs in between values
to separate them. You can choose your delimiter via an argument (tab
\, space \, comma or any \, or no argument which is the same as any).
A string must precede a value group \, which will be used as a tag
\, sent to the right inlet of [send] \, and used as an argument to
the corresponding [receive]. The last value of each group must be printed
with Serial.println() \, in order for [serial_print] to know a value
group has ended.;
#X text 41 278 Note: the digital pins are using the internal pull-up
resistors \, using INPUT_PULLUP \, so you don't need to use resistors
for switches. For this reason the readings of the digital pins are
inverted so you get a 1 when you press a switch and a 0 when you release
it.;
#N canvas 269 139 511 479 receive_floats_strings_and_bangs 0;
#X obj 72 174 vradio 15 1 0 3 empty empty empty 0 -8 0 10 -262144 -1
-1 2;
#X obj 72 310 serial_print;
#X obj 72 332 s;
#X obj 186 373 r receive_string;
#X symbolatom 186 395 0 0 0 0 - - -;
#X obj 314 374 r receive_bang;
#X obj 72 288 comport;
#X obj 100 236 loadbang;
#X msg 100 258 close;
#X floatatom 155 237 5 0 0 0 - - -, f 5;
#X msg 155 256 open \$1;
#X text 90 205 outputs a bang;
#X text 90 187 outputs a string;
#X obj 314 396 print got_bang;
#X floatatom 72 396 0 0 0 0 - - -;
#X obj 72 374 r receive_float;
#X text 90 171 outputs a float;
#X text 61 28 With [serial_print] it's possible to receive \, floats
\, strings instead of numeral values \, or even bangs. Close [comport]
in the parent patch and load the float_string_bang.ino sketch to your
Arduino board. Then open its serial port in this subpatch and click
on the radio buttons below. The top button prints the Arduino hard-coded
Pi \, the middle button prints a string to the symbol atom below \,
and the bottom button outputs a bang which is printed on Pd's console.
Check the Arduino sketch for details.;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 1 1 2 1;
#X connect 3 0 4 0;
#X connect 5 0 13 0;
#X connect 6 0 1 0;
#X connect 7 0 8 0;
#X connect 8 0 6 0;
#X connect 9 0 10 0;
#X connect 10 0 6 0;
#X connect 15 0 14 0;
#X restore 43 621 pd receive_floats_strings_and_bangs;
#X connect 0 0 14 0;
#X connect 3 0 14 0;
#X connect 4 0 5 0;
#X connect 5 0 14 0;
#X connect 14 0 17 0;
#X connect 17 0 10 0;
#X connect 17 1 10 1;
#X connect 18 0 11 0;
#X connect 18 1 12 0;
#X connect 18 2 13 0;
#X connect 19 0 20 0;
#X connect 19 1 21 0;
#X connect 19 2 22 0;
#X connect 28 0 18 0;
#X connect 29 0 19 0;
